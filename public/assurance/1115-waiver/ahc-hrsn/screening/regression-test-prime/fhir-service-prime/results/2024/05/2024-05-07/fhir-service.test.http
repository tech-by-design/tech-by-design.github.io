# this file is for testing and verifying the  FHIR service with two api end points
# ------------------------------------------------------------------------
# * requires the `vscode-httpyac` Visual Studio Code extension
# * requires a `.env` file with HOST, PORT
# * this service has 2 endpoints /Bundle/$validate & /Bundle/

### Test that your server is running by fetching its CapabilityStatement:

@hostName = {{$dotenv HOST}}
@contentType = application/json
@TECH_BD_FHIR_SERVICE_QE_IDENTIFIER = healthelink
GET {{hostName}}/metadata HTTP/1.1
Content-Type: {{contentType}}
{{
  const { equal } = require('assert');
  test('status code 200', () => {
    equal(response.statusCode, 200);
  });
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'application/fhir+json;charset=utf-8');
  });
  test.hasResponseBody();
  test('Check Resource Type', () => {
      equal(JSON.parse(response.body).resourceType, 'CapabilityStatement');
  });
  test('Status Check', () => {
      equal(JSON.parse(response.body).status, 'active');
  });
  test('Status Check', () => {
      equal(JSON.parse(response.body).software.name, 'HAPI FHIR Server');
  });
}}

### Validating a bundle resource from your server - happy path

@hostName = {{$dotenv HOST}}
@contentType = application/json

POST {{hostName}}/Bundle/$validate HTTP/1.1
Content-Type: {{contentType}}
{{
  const { equal } = require('assert');
  test('status code 200', () => {
    equal(response.statusCode, 200);
  });
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'application/fhir+json;charset=utf-8');
  });
  test.hasResponseBody();
  test('Check Resource Type', () => {
      equal(JSON.parse(response.body).resourceType, 'OperationOutcome');
  });
}}

< fhir-fixture-shinny-impl-guide-sample.json

###  Validating a bundle resource from your server - unhappy path

@hostName = {{$dotenv HOST}}
@contentType = application/json

POST {{hostName}}/Bundle/$validate HTTP/1.1
Content-Type: {{contentType}}
{{
  const { equal, notEqual } = require('assert');
  test('status code 200', () => {
    notEqual(response.statusCode, 200); // Use equal for this specific test case
  });
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'application/fhir+json;charset=utf-8');
  });
  test.hasResponseBody();
  test('check Result', () => {
    notEqual(JSON.parse(response.body).issue.severity, 'error');
  });
}}


< fhir-fixture-unhappy-path-01.json


### Submitting a bundle resource from your server  - unhappy path

@hostName = {{$dotenv HOST}}
@contentType = {{contentType}}

POST {{hostName}}/Bundle/?x=y&qe=healthelink HTTP/1.1
Content-Type: application/json
{{
  const { equal, notEqual } = require('assert');
  test('status code 201', () => {
    notEqual(response.statusCode, 201); // Use equal for this specific test case
  });
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'application/fhir+json;charset=utf-8');
  });
  test.hasResponseBody();
  test('check Result', () => {
    notEqual(JSON.parse(response.body).issue.severity, 'error');
  });
}}

< fhir-fixture-unhappy-path-01.json

###  Validating a bundle resource from bronx QE - unhappy path

@hostName = {{$dotenv HOST}}
@contentType = application/json

POST {{hostName}}/Bundle/$validate HTTP/1.1
Content-Type: {{contentType}}
{{
  const { equal, notEqual } = require('assert');
  test('status code 200', () => {
    notEqual(response.statusCode, 200); // Use equal for this specific test case
  });
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'application/fhir+json;charset=utf-8');
  });
  test.hasResponseBody();
  test('check Result', () => {
    equal(JSON.parse(response.body).issue[0].severity, 'error');
  });
  test('check Diagnostics', () => {
    equal(JSON.parse(response.body).issue[0].diagnostics, 'Error code: 639 - No identifier supplied');
  });
}}


< fhir-fixture-shinny-bronx-unhappy-path.json

###  Validating a bundle resource from healtheconnections QE - unhappy path

@hostName = {{$dotenv HOST}}
@contentType = application/json

POST {{hostName}}/Bundle/$validate HTTP/1.1
Content-Type: {{contentType}}
{{
  const { equal, notEqual, includes } = require('assert');
  test('status code 200', () => {
    notEqual(response.statusCode, 200); // Use equal for this specific test case
  });
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'application/fhir+json;charset=utf-8');
  });
  test.hasResponseBody();
  test('check Result', () => {
    equal(JSON.parse(response.body).issue[0].severity, 'error');
  });
  test('check Diagnostics', () => {
    equal((JSON.parse(response.body).issue[0].diagnostics).includes('Invalid date/time format'), true);
  });
}}

< fhir-fixture-shinny-healtheconnections-unhappy-path.json
