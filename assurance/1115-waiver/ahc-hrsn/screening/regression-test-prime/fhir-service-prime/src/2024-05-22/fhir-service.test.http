# this file is for testing and verifying the  FHIR service with two api end points
# ------------------------------------------------------------------------
# * requires the `vscode-httpyac` Visual Studio Code extension
# * requires a `.env` file with HOST, PORT
# * this service has 2 endpoints /Bundle/$validate & /Bundle/

@hostName = {{$processEnv HOST}}

@contentType = application/json
@TECH_BD_FHIR_SERVICE_QE_IDENTIFIER = HEALTHELINK

### /metadata endpoint should return FHIR CapabilityStatement

GET {{hostName}}/metadata HTTP/1.1
Content-Type: {{contentType}}
{{
  const { equal } = require('assert');
  test('status code 200', () => {
    equal(response.statusCode, 200);
  });
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'text/plain;charset=UTF-8');
  });
  test.hasResponseBody();
}}

### /Bundle/$validate should validate fhir-fixture-shinny-impl-guide-sample.json

POST {{hostName}}/Bundle/$validate HTTP/1.1 
Content-Type: {{contentType}}
Accept : application/fhir+json;charset=utf-8
TECH_BD_FHIR_SERVICE_QE_IDENTIFIER: {{TECH_BD_FHIR_SERVICE_QE_IDENTIFIER}}
{{
  const { equal } = require('assert');
  test('status code 200', () => {
    equal(response.statusCode, 200);
  });
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'application/fhir+json;charset=utf-8');
  });
  test.hasResponseBody();
  test('Check Resource Type', () => {      
      equal(JSON.parse(response.body).techbdSession.version, '0.23.5');
  });
}}

< fhir-fixture-shinny-impl-guide-sample.json

### /Bundle/$validate should validate fhir-fixture-unhappy-path-01.json

POST {{hostName}}/Bundle/$validate HTTP/1.1
Content-Type: {{contentType}}
Accept : application/fhir+json;charset=utf-8
TECH_BD_FHIR_SERVICE_QE_IDENTIFIER: {{TECH_BD_FHIR_SERVICE_QE_IDENTIFIER}}
{{
  const { equal, notEqual } = require('assert');
  test('status code 200', () => {
    equal(response.statusCode, 200); // Use equal for this specific test case
  });
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'application/fhir+json;charset=utf-8');
  });
  test.hasResponseBody();
  test('check Result', () => {
    equal(JSON.parse(response.body).techbdSession.entries[0].exceptions.length, 1);
  });
}}


< fhir-fixture-unhappy-path-01.json


### /Bundle/$validate should validate fhir-fixture-shinny-bronx-unhappy-path.json

POST {{hostName}}/Bundle/$validate HTTP/1.1
Content-Type: {{contentType}}
Accept : application/fhir+json;charset=utf-8
TECH_BD_FHIR_SERVICE_QE_IDENTIFIER: {{TECH_BD_FHIR_SERVICE_QE_IDENTIFIER}}
{{
  const { equal, notEqual } = require('assert');
  test('status code 200', () => {
    equal(response.statusCode, 200); // Use equal for this specific test case
  });
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'application/fhir+json;charset=utf-8');
  });
  test.hasResponseBody();
  test('check Result', () => {
    equal(JSON.parse(response.body).techbdSession.entries[0].result.isSuccessful, false);
  });
  test('check Diagnostics', () => {
    equal(JSON.parse(response.body).techbdSession.entries[0].operationOutcome.outcome.issue.length, 88);
  });
}}


< fhir-fixture-shinny-bronx-unhappy-path.json

### /Bundle/$validate should validate fhir-fixture-shinny-healtheconnections-unhappy-path.json

POST {{hostName}}/Bundle/$validate HTTP/1.1
Content-Type: {{contentType}}
Accept : application/fhir+json;charset=utf-8
TECH_BD_FHIR_SERVICE_QE_IDENTIFIER: {{TECH_BD_FHIR_SERVICE_QE_IDENTIFIER}}
{{
  const { equal, notEqual, includes } = require('assert');
  test('status code 200', () => {
    equal(response.statusCode, 200); // Use equal for this specific test case
  });
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'application/fhir+json;charset=utf-8');
  });
  test.hasResponseBody();
  test('check Result', () => {
    equal(JSON.parse(response.body).techbdSession.entries[0].exceptions.length, 1);
  });
  test('check Diagnostics', () => {
    equal((JSON.parse(response.body).techbdSession.entries[0].exceptions[0]).includes('Invalid date/time format'), true);
  });
}}

< fhir-fixture-shinny-healtheconnections-unhappy-path.json

### /Bundle should validate and submit fhir-fixture-shinny-impl-guide-sample.json as HEALTHeLINK

POST {{hostName}}/Bundle/?qe=HEALTHELINK HTTP/1.1
Content-Type: application/json
{{
  const { equal, notEqual } = require('assert');
  test('status code 201', () => {
    notEqual(response.statusCode, 201); // Use equal for this specific test case
  });
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'text/plain;charset=UTF-8');
  });
  test.hasResponseBody();
  test('check Result', () => {
    equal(response.body, 'API invoked');
  });
}}

< fhir-fixture-shinny-impl-guide-sample.json  

### /admin/diagnostics endpoint should be an HTML page

GET {{hostName}}/admin/diagnostics HTTP/1.1
Content-Type: application/json
TECH_BD_FHIR_SERVICE_QE_IDENTIFIER: {{TECH_BD_FHIR_SERVICE_QE_IDENTIFIER}}
{{
  const { equal, notEqual } = require('assert');
  test('status code 200', () => {
    equal(response.statusCode, 200); // Use equal for this specific test case
  });
}}